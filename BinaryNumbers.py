"""
Given a number N. The task is to generate and print all binary numbers with decimal values from 1 to N.

Example 1:
Input: N = 2
Output: 1 10
Explanation: Binary numbers from 1 to 2 are 1 and 10.

Example 2:
Input: N = 5
Output: 1 10 11 100 101
Explanation: Binary numbers from 1 to 5 are 1 , 10 , 11 , 100 and 101.
"""

from collections import deque

def generate(N):
    # Create a queue for the binary numbers
    queue = deque()
    
    # Start by adding '1' (binary for 1) to the queue
    queue.append('1')
    
    # Loop until we print all numbers from 1 to N
    result = []
    for _ in range(N):
        # Get the front of the queue
        current = queue.popleft()
        
        # Add the current binary number to the result
        result.append(current)
        
        # Generate the next two numbers and enqueue them
        queue.append(current + '0')
        queue.append(current + '1')
    
    # Print the binary numbers as space-separated strings
    print(" ".join(result))

# Example usage:
generate(2)  # Output: 1 10
generate(5)  # Output: 1 10 11 100 101

'''
Here's a line-by-line breakdown of the code that generates binary numbers from 1 to N using a queue:

from collections import deque
Imports deque from the collections module, which will be used as a queue to generate binary numbers.

def generate(N):
Defines a function generate that takes one parameter N, the number of binary numbers to generate.

queue = deque()
Initializes an empty deque queue. This will store the binary numbers as strings.

queue.append('1')
Adds the binary number '1' to the queue, which is the binary representation of the number 1.

result = []
Initializes an empty list result, which will store the binary numbers in sequence.

for _ in range(N):
Starts a for loop that runs N times, where N is the number of binary numbers to generate.

current = queue.popleft()
Removes and retrieves the leftmost (first) element from the queue, storing it in the variable current. 
This is the current binary number to process.

result.append(current)
Adds the current binary number to the result list.

queue.append(current + '0')
Appends the next binary number generated by adding '0' to the current binary number. 
For example, if current is '1', the next number '10' is added to the queue.

queue.append(current + '1')
Similarly, appends the binary number generated by adding '1' to the current binary number. For example, '11' would be added if current is '1'.

print(" ".join(result))
After generating all N binary numbers, the list result is joined into a single string where the numbers are space-separated, 
and this string is printed.

generate(2)
Generates the first 2 binary numbers: Output: 1 10

generate(5)
Generates the first 5 binary numbers: Output: 1 10 11 100 101

Key Points
The queue (deque) ensures that we process binary numbers in the correct order (breadth-first).
Each binary number is generated by appending '0' and '1' to the previous number, simulating the binary number system.
The function runs in O(N) time, where N is the number of binary numbers to generate.
'''